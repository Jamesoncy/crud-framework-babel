{"version":3,"sources":["../app/app.js"],"names":["app","publicDir","set","__dirname","use","express","static","engine","require","renderFile","controllers","dir","match","recursive","map","name","path","isFile","requireAll","replace","policies","_","each","routes","value","index","getApi","split","middleware","policy","val","ind","indexOf","push","get","post","listen","console","log"],"mappings":"AAAA;;AACA;;AAEA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;;;AAFA;AAIA,IAAMA,MAAM,wBAAZ;AAAA,IACAC,YAAY,aADZ;AAVA;;AAYAD,IAAIE,GAAJ,CAAQ,OAAR,EAAgBC,YAAYF,SAAZ,GAAuB,WAAvC;AACAD,IAAII,GAAJ,CAAQ,SAAR,EAAmBC,kBAAQC,MAAR,CAAeH,YAAYF,SAAZ,GAAsB,UAArC,CAAnB;AACAD,IAAII,GAAJ,CAAQ,WAAR,EAAqBC,kBAAQC,MAAR,CAAeH,YAAYF,SAAZ,GAAsB,oBAArC,CAArB,GACAD,IAAII,GAAJ,CAAQ,OAAR,EAAiBC,kBAAQC,MAAR,CAAeH,YAAYF,SAAZ,GAAsB,WAArC,CAAjB,CADA;AAEAD,IAAII,GAAJ,CAAQ,iCAAR;AACAJ,IAAIO,MAAJ,CAAW,MAAX,EAAmBC,QAAQ,KAAR,EAAeC,UAAlC;;AAEA,IAAIC,cAAc,uBAAW;AAC5BC,MAAK,0BADuB,EACK;AACjCC,QAAO,kBAFqB;AAG5BC,YAAW,KAHiB;AAI5BC,MAAK,aAACC,IAAD,EAAOC,IAAP,EAAaC,MAAb;AAAA,SAAyBC,kBAAWJ,GAAX,CAAeC,IAAf,EAAqBC,IAArB,EAA2BC,MAA3B,EAAmCE,OAAnC,CAA2C,cAA3C,EAA0D,EAA1D,CAAzB;AAAA;AAJuB,CAAX,CAAlB;AAAA,IAMAC,WAAW,uBAAW;AACrBT,MAAK,wBADgB;AAEnBC,QAAO,cAFY,CAEI;AAFJ,CAAX,CANX;;AAWAS,qBAAEC,IAAF,CAAOC,gBAAP,EAAe,UAASC,KAAT,EAAgBC,KAAhB,EAAsB;AACpC,KAAIC,SAASD,MAAME,KAAN,CAAY,GAAZ,CAAb;AAAA,KACAX,OAAOQ,MAAMG,KAAN,CAAY,GAAZ,CADP;AAAA,KAEAC,aAAa,EAFb;;AAIAP,sBAAEC,IAAF,CAAOO,mBAAO,UAAP,CAAP,EAA2B,UAASC,GAAT,EAAcC,GAAd,EAAkB;AAC5C,MAAGf,KAAK,CAAL,KAAWe,GAAX,IAAkBf,KAAK,CAAL,KAAWc,GAAhC,EAAoC;AACnCF,gBAAaE,IAAId,KAAK,CAAL,CAAJ,CAAb;AACA,UAAO,KAAP;AACA;AACD,EALD;;AAOAK,sBAAEC,IAAF,CAAOM,UAAP,EAAmB,UAASE,GAAT,EAAcC,GAAd,EAAkB;AACpC,MAAGD,IAAIE,OAAJ,CAAY,QAAZ,IAAwB,CAAC,CAA5B,EAA+B;AAC9BJ,cAAWG,GAAX,IAAkBX,SAASU,GAAT,CAAlB;AACA;AACD,EAJD;;AAMAF,YAAWK,IAAX,CAAgBvB,YAAYM,KAAK,CAAL,CAAZ,EAAqBA,KAAK,CAAL,CAArB,CAAhB;AACA,KAAGU,OAAO,CAAP,KAAa,KAAhB,EAAsB;AACrB1B,MAAIkC,GAAJ,CAAQR,OAAO,CAAP,CAAR,EAAmB,gCAAQE,UAAR,CAAnB;AACA,EAFD,MAEM,IAAIF,OAAO,CAAP,KAAa,MAAjB,EAAwB;AAC7B1B,MAAImC,IAAJ,CAAST,OAAO,CAAP,CAAT,EAAoB,gCAAQE,UAAR,CAApB;AACA;AACD,CAxBD;;AA0BA5B,IAAIoC,MAAJ,CAAW,IAAX,EAAiB,YAAU;AAC1BC,SAAQC,GAAR,CAAY,kBAAkB,IAA9B;AACA,CAFD","file":"app.js","sourcesContent":["'use strict'\r\nimport \"babel-polyfill\";\r\n//modules  \r\nimport express from 'express'\r\nimport requireAll from 'require.all'\r\nimport {compose} from 'compose-middleware'\r\nimport _ from 'underscore'\r\nimport validition from 'express-validator'\r\n//files\r\nimport routes from './application/config/routes'\r\nimport policy from './application/config/policies'\r\n\r\nconst app = express(),\r\npublicDir = './../public'\r\napp.set('views',__dirname + publicDir+ '/template')\r\napp.use('/public', express.static(__dirname + publicDir+'/plugins'))\r\napp.use('/partials', express.static(__dirname + publicDir+'/template/includes')),\r\napp.use('/view', express.static(__dirname + publicDir+'/template'))\r\napp.use(validition())\r\napp.engine('html', require('ejs').renderFile)\r\n\r\nlet controllers = requireAll({\r\n\tdir: './application/controller', //only files that end with 'controller.js' \r\n\tmatch: /Controller\\.js$/i,\r\n\trecursive: false,\r\n\tmap: (name, path, isFile ) => requireAll.map(name, path, isFile).replace(/Controller$/i,'')\r\n}),\r\npolicies = requireAll({\r\n\tdir: './application/policies',\r\n  \tmatch: /Policy\\.js$/i, //only files that end with 'controller.js' \r\n})\r\n\r\n_.each(routes, function(value, index){\r\n\tlet getApi = index.split(\" \"),\r\n\tpath = value.split(\".\"),\r\n\tmiddleware = []\r\n\r\n\t_.each(policy[\"policies\"], function(val, ind){\r\n\t\tif(path[0] == ind && path[1] in val){\r\n\t\t\tmiddleware = val[path[1]];\r\n\t\t\treturn false;\r\n\t\t}\r\n\t});\r\n\r\n\t_.each(middleware, function(val, ind){\r\n\t\tif(val.indexOf(\"Policy\") > -1 ){\r\n\t\t\tmiddleware[ind] = policies[val];\r\n\t\t}\r\n\t});\r\n\r\n\tmiddleware.push(controllers[path[0]][path[1]])\r\n\tif(getApi[0] == \"GET\"){\r\n\t\tapp.get(getApi[1], compose(middleware))\r\n\t}else if (getApi[0] == \"POST\"){\r\n\t\tapp.post(getApi[1], compose(middleware));\r\n\t}\r\n})\r\n\r\napp.listen(4200, function(){\r\n\tconsole.log('running port ' + 4200)\r\n})"]}